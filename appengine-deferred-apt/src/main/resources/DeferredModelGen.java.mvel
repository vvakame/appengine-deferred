package @{packageName};

import java.util.logging.Logger;

import com.google.appengine.api.taskqueue.DeferredTask;

/**
 * {@link @{className}} を遅延処理させる.
 * 
 * @author vvakame
 */
public class @{className}Deferred {

	static final Logger logger = Logger.getLogger(@{className}Deferred.class.getName());

@foreach{obj : methods}
	/**
	 * {@link @{className}} の同名メソッドの失敗時非同期化.
	 * @foreach{p : obj.params}
	 * @param @{p.name}@end{}
	 * @return 実行結果(非同期化した場合も帰る)@foreach{th : obj.throws}
	 * @throws @{th}@end{}
	 * @author vvakame
	 */
	public static DeferredTask @{obj.name}(@{obj._args}) {
		return new Task_@{obj.name}_@{obj._underscore}(@{obj._call});
	}
	@if{obj.extends == null}
	static class Task_@{obj.name}_@{obj._underscore} implements DeferredTask {
	@else{}
	static class Task_@{obj.name}_@{obj._underscore} extends @{obj.extends} {
	@end{}
		private static final long serialVersionUID = 1L;

	@foreach{param : obj.params}
		@{param.type} @{param.name};
	@end{}

		Task_@{obj.name}_@{obj._underscore}(@{obj._args}) {
	@foreach{param : obj.params}
			this.@{param.name} = @{param.name};
	@end{}
		}

	@if{obj.extends == null}
		@Override
		public void run() {
		@foreach{param : obj.params}
			logger.log(java.util.logging.Level.FINEST, "@{param.name}=" + String.valueOf(@{param.name}));
		@end{}
			try{
				@{className}.@{obj.name}(@{obj._call});
			}catch(Exception e){
				if(e instanceof RuntimeException){
					throw (RuntimeException)e;
				}else{
					throw new RuntimeException(e);
				}
			}
		}
	@else{}
		@Override
		public void delegate() @{obj._throws} {
		@foreach{param : obj.params}
			logger.log(java.util.logging.Level.FINEST, "@{param.name}=" + String.valueOf(@{param.name}));
		@end{}
			@{className}.@{obj.name}(@{obj._call});
		}
	@end{}
	}
@end{}
}
